__global__ void myKernel(int* data){
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    cooperative_groups::grid_group grid = cooperative_groups::this_grid();
    grid.sync();
}


int main(int argc, char* argv[]) {
        const int N = 256;
        const int block_size = 128;
        const int grid_size = (N + block_size - 1) / block_size;

        int* data;
        cudaMalloc((void**)&data, N * sizeof(int));
        CHECK_CUDA(cudaDeviceSynchronize());

        cudaLaunchCooperativeKernel((void *) myKernel, grid_size, block_size, (void **)(&data));
        CHECK_CUDA(cudaDeviceSynchronize());

        cudaFree(data);


        return 0;
}